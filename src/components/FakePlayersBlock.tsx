
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface FakePlayer {
  id: number;
  name: string;
  avatar: string;
  lastWin: string;
  amount: number;
  timestamp: Date;
}

const FakePlayersBlock: React.FC = () => {
  const [players, setPlayers] = useState<FakePlayer[]>([]);

  const generateFakePlayer = (): FakePlayer => {
    const names = [
      '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∏—Ö–∞–∏–ª', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ù–∏–∫–æ–ª–∞–π', '–í–ª–∞–¥–∏–º–∏—Ä',
      '–ê–Ω–Ω–∞', '–ï–ª–µ–Ω–∞', '–û–ª—å–≥–∞', '–¢–∞—Ç—å—è–Ω–∞', '–ú–∞—Ä–∏—è', '–ù–∞—Ç–∞–ª—å—è', '–ò—Ä–∏–Ω–∞',
      '–ú–∞–∫—Å–∏–º', '–ê—Ä—Ç—ë–º', '–î–µ–Ω–∏—Å', '–ò–≥–æ—Ä—å', '–ê–ª–µ–∫—Å–µ–π', '–†–æ–º–∞–Ω', '–í–∏–∫—Ç–æ—Ä',
      '–°–≤–µ—Ç–ª–∞–Ω–∞', '–Æ–ª–∏—è', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–õ—é–¥–º–∏–ª–∞', '–ì–∞–ª–∏–Ω–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
      '–ü–∞–≤–µ–ª', '–ï–≤–≥–µ–Ω–∏–π', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–°—Ç–∞–Ω–∏—Å–ª–∞–≤', '–í–∞–ª–µ—Ä–∏–π', '–õ–µ–æ–Ω–∏–¥',
      '–í–µ—Ä–æ–Ω–∏–∫–∞', '–ö—Ä–∏—Å—Ç–∏–Ω–∞', '–î–∞—Ä—å—è', '–ü–æ–ª–∏–Ω–∞'
    ];

    const avatars = ['üë§', 'üë®', 'üë©', 'üßë', 'üë®‚Äçüíº', 'üë©‚Äçüíº', 'üßî', 'üë®‚Äçüéì', 'üë©‚Äçüéì'];
    const winTypes = ['‚≠ê –∑–≤—ë–∑–¥', 'üëë –ü—Ä–µ–º–∏—É–º'];
    
    const isStars = Math.random() > 0.05;
    const winType = isStars ? '‚≠ê –∑–≤—ë–∑–¥' : 'üëë –ü—Ä–µ–º–∏—É–º';
    const amount = isStars ? Math.floor(Math.random() * 5) + 1 : 1;

    return {
      id: Math.random(),
      name: names[Math.floor(Math.random() * names.length)],
      avatar: avatars[Math.floor(Math.random() * avatars.length)],
      lastWin: winType,
      amount,
      timestamp: new Date()
    };
  };

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 35 –∏–≥—Ä–æ–∫–æ–≤
    const initialPlayers = Array.from({ length: 35 }, generateFakePlayer);
    setPlayers(initialPlayers);

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3-5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      setPlayers(prev => {
        const newPlayers = [...prev];
        const randomIndex = Math.floor(Math.random() * newPlayers.length);
        newPlayers[randomIndex] = generateFakePlayer();
        return newPlayers.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
      });
    }, Math.random() * 2000 + 3000); // 3-5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, []);

  return (
    <Card className="bg-white/90 backdrop-blur-sm">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2 max-h-96 overflow-y-auto">
          {players.slice(0, 15).map(player => (
            <div key={player.id} className="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
              <div className="flex items-center gap-2">
                <span className="text-lg">{player.avatar}</span>
                <span className="font-medium text-sm">{player.name}</span>
              </div>
              <Badge variant="secondary" className="text-xs">
                {player.amount} {player.lastWin}
              </Badge>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default FakePlayersBlock;
