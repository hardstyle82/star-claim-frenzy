
import React, { useState } from 'react';
import { MessageCircleIcon, XIcon, SendIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

const SupportBot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { id: 1, text: '–ü—Ä–∏–≤–µ—Ç! –Ø –ú–∞–∫—Å, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –ö–∞–∫ –¥–µ–ª–∞ —Å –∏–≥—Ä–æ–π? üòä', isBot: true }
  ]);
  const [inputValue, setInputValue] = useState('');

  const botResponses = {
    '–∫–∞–∫ –∏–≥—Ä–∞—Ç—å': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É CLAIM! –ö–∞–∂–¥—ã–µ 5 –∫–ª–∏–∫–æ–≤ - –∫—É–ª–¥–∞—É–Ω 35 —Å–µ–∫—É–Ω–¥. üéÆ',
    '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: 1) –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã? 2) –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª? 3) –ù–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞? üîç',
    '–≤—ã–≤–æ–¥': '–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –∑–≤—ë–∑–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"! 1 –∑–≤–µ–∑–¥–∞ = $0.01 üí∞',
    '–ø—Ä–µ–º–∏—É–º': '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ü—Ä–µ–º–∏—É–º Telegram –Ω—É–∂–Ω–æ 1000 –∑–≤—ë–∑–¥ –∏ 1000 –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! üëë',
    '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üìù',
    '–±–æ–Ω—É—Å': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å! üéÅ',
    '—Ä–µ—Ñ–µ—Ä–∞–ª': '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ % —Å –∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π! üë•'
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage = { id: Date.now(), text: inputValue, isBot: false };
    setMessages(prev => [...prev, userMessage]);

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
    setTimeout(() => {
      const lowerInput = inputValue.toLowerCase();
      let botResponse = '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ: –∏–≥—Ä—É, –≤—ã–≤–æ–¥, –ø—Ä–µ–º–∏—É–º, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –±–æ–Ω—É—Å—ã! ü§î';
      
      for (const [key, response] of Object.entries(botResponses)) {
        if (lowerInput.includes(key)) {
          botResponse = response;
          break;
        }
      }

      const botMessage = { id: Date.now() + 1, text: botResponse, isBot: true };
      setMessages(prev => [...prev, botMessage]);
    }, 1000);

    setInputValue('');
  };

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ */}
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 left-6 w-16 h-16 rounded-full bg-blue-600 hover:bg-blue-700 text-white shadow-2xl animate-bounce z-50"
      >
        <MessageCircleIcon className="w-8 h-8" />
      </Button>

      {/* –ß–∞—Ç */}
      {isOpen && (
        <Card className="fixed bottom-24 left-6 w-80 h-96 bg-white shadow-2xl z-50 border-2 border-blue-400">
          <CardHeader className="bg-blue-600 text-white p-3">
            <div className="flex justify-between items-center">
              <CardTitle className="text-lg">ü§ñ –ú–∞–∫—Å - –ü–æ–¥–¥–µ—Ä–∂–∫–∞</CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsOpen(false)}
                className="text-white hover:bg-blue-700 p-1"
              >
                <XIcon className="w-4 h-4" />
              </Button>
            </div>
            <div className="text-sm opacity-90">–û–Ω–ª–∞–π–Ω ‚Ä¢ –û—Ç–≤–µ—á–∞—é –±—ã—Å—Ç—Ä–æ ‚ö°</div>
          </CardHeader>
          
          <CardContent className="p-0 flex flex-col h-full">
            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="flex-1 overflow-y-auto p-3 space-y-2 bg-gray-50">
              {messages.map(message => (
                <div
                  key={message.id}
                  className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
                >
                  <div
                    className={`max-w-xs p-2 rounded-lg text-sm ${
                      message.isBot
                        ? 'bg-blue-100 text-blue-900 border border-blue-200'
                        : 'bg-green-500 text-white'
                    }`}
                  >
                    {message.text}
                  </div>
                </div>
              ))}
            </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="border-t p-3 bg-white">
              <div className="flex gap-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  className="text-sm"
                />
                <Button 
                  onClick={handleSendMessage}
                  size="sm"
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  <SendIcon className="w-4 h-4" />
                </Button>
              </div>
              <div className="text-xs text-gray-500 mt-1">
                üí° –°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ: –∏–≥—Ä—É, –≤—ã–≤–æ–¥, –ø—Ä–µ–º–∏—É–º
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </>
  );
};

export default SupportBot;
